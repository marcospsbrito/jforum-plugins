/*
 * Copyright (c) Rafael Steil
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 22, 2005 4:24:18 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id: GenericSearchIndexerDAO.java,v 1.7 2005/07/19 16:10:16 andowson Exp $
 */
public class GenericSearchIndexerDAO extends AutoKeys implements net.jforum.dao.SearchIndexerDAO
{
	private Connection conn;
	
	/**
	 * @see net.jforum.dao.SearchIndexerDAO#setConnection(java.sql.Connection)
	 */
	public void setConnection(Connection conn)
	{
		this.conn = conn;
	}
	
	/**
	 * @see net.jforum.dao.SearchIndexerDAO#indexSearchWords(java.util.List)
	 */
	public void insertSearchWords(List posts) throws Exception
	{
		// Prepare statements
		PreparedStatement insert = this.getStatementForAutoKeys("SearchModel.insertWords", this.conn);
		PreparedStatement existing = this.conn.prepareStatement(
						SystemGlobals.getSql("SearchModel.searchExistingWord"));
		
		PreparedStatement existingAssociation = this.conn.prepareStatement(
						SystemGlobals.getSql("SearchModel.searchExistingAssociation"));
		
		PreparedStatement wordToPost = this.conn.prepareStatement(
						SystemGlobals.getSql("SearchModel.associateWordToPost"));
		
		Pattern pattern = Pattern.compile("[\\.\\\\\\/~^&\\(\\)-_+=!@#$%\"\'\\[\\]\\{\\}?<:>,*\n\r\t¡A¡F¡G¡B¡C¡H¡I¡]¡^¡u¡v¡y¡z¡X¡K¡E]");
		
		this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("SearchModel.lastGeneratedWordId"));
		
		int minWordSize = SystemGlobals.getIntValue(ConfigKeys.SEARCH_MIN_WORD_SIZE);
		
		// Process all posts
		for (Iterator iter = posts.iterator(); iter.hasNext(); ) {
			Post post = (Post)iter.next();
			
			existingAssociation.setInt(2, post.getId());
			wordToPost.setInt(1, post.getId());
			
			String str = post.getText() + " " + post.getSubject();
			str = pattern.matcher(str).replaceAll(" ");
			
			StringTokenizer tok = new StringTokenizer(str, " ");
			
			while (tok.hasMoreTokens()) {
				String word = tok.nextToken().trim().toLowerCase();
				
				// Skip words less than "n" chars
				if (word.length() < minWordSize) {
					continue;
				}
				
				// Trucate words longer than 100 chars
				if (word.length() > 100) {
					word = word.substring(0, 100); 
				}
				
				// Verify if the current word is not in the database before proceeding
				int hash = word.hashCode();
				existing.setInt(1, hash);
				ResultSet rs = existing.executeQuery();

				if (!rs.next()) {
					// The word is not in the database. Insert it now
					insert.setInt(1, hash);
					insert.setString(2, word);
					int wordId = this.executeAutoKeysQuery(insert, this.conn);

					// Associate the current word to the post
					this.associateWordToPost(wordToPost, word, wordId, post);
				}
				else {
					// The word is already in the database ( jforum_search_words )
					// Check then if the current post is not already associated to the word
					int wordId = rs.getInt("word_id");
					existingAssociation.setInt(1, wordId);
					
					ResultSet rsa = existingAssociation.executeQuery();
					if (!rsa.next()) {
						// Assoacite the post to the word
						this.associateWordToPost(wordToPost, word, wordId, post);
					}
					rsa.close();
				}
				
				rs.close();
			}
		}
		
		insert.close();
		existing.close();
		existingAssociation.close();
		wordToPost.close();
	}
	
	/**
	 * @see net.jforum.dao.SearchIndexerDAO#insertSearchWords(net.jforum.entities.Post)
	 */
	public void insertSearchWords(final Post post) throws Exception
	{
		this.insertSearchWords(new ArrayList() {{ add(post); }});
	}
	
	private void associateWordToPost(PreparedStatement p, String word, int wordId, Post post) throws Exception
	{
		p.setInt(2, wordId);
		
		String subject = post.getSubject();
		int inSubject = 0;
		if (subject != null && !subject.equals("")) {
			inSubject = subject.indexOf(word) > -1 ? 1 : 0;
		}
		
		p.setInt(3, inSubject);
		p.executeUpdate();
	}
}
