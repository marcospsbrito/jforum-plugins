--- shCore-original.js	2007-09-02 14:36:47.000000000 -0300
+++ shCore.js	2007-09-02 14:38:59.000000000 -0300
@@ -263,23 +263,44 @@
 {
 	if(str == null || str.length == 0)
 		return;
-
+		
 	var span = this.CreateElement('SPAN');
 	
-//	str = str.replace(/&/g, '&amp;');
-	str = str.replace(/ /g, '&nbsp;');
 	str = str.replace(/</g, '&lt;');
-//	str = str.replace(/&lt;/g, '<');
-//	str = str.replace(/>/g, '&gt;');
-	str = str.replace(/\n/gm, '&nbsp;<br>');
-
+	str = str.replace(/\n/gm, '<br>');
+	
+	var lastWasBlank = false;
+	
+	if (str == ' ') {
+		str = "&nbsp;"
+	}
+	else if (str.indexOf(' ') > -1) {
+		for (var i = 0; i < str.length; i++) {
+			var isBlank = str[i] == ' ';
+		
+			if (lastWasBlank && isBlank) {
+				// For each 2 consecutive blank spaces, replace it by one blank space and one &nbsp;
+				str = str.substring(0, i) + "&nbsp;" + str.substring(i + 1);
+				lastWasBlank = false;
+			}
+			else {
+				lastWasBlank = isBlank;
+			}
+		}
+	
+		// Safari appears to get confused if the last char is a regular white space
+		if (str[str.length - 1] == ' ') {
+			str = str.substring(0, str.length - 1) + "&nbsp;"
+		}
+	}
+	
 	// when adding a piece of code, check to see if it has line breaks in it 
 	// and if it does, wrap individual line breaks with span tags
 	if(css != null)
 	{
 		if((/br/gi).test(str))
 		{
-			var lines = str.split('&nbsp;<br>');
+			var lines = str.split('<br>');
 			
 			for(var i = 0; i < lines.length; i++)
 			{
@@ -484,7 +505,7 @@
 	
 	if(code == null)
 		code = '';
-	
+		
 	this.originalCode = code;
 	this.code = Chop(Unindent(code));
 	this.div = this.CreateElement('DIV');
@@ -614,9 +635,12 @@
 	{
 		var tags = document.getElementsByTagName(tagName);
 
-		for(var i = 0; i < tags.length; i++)
-			if(tags[i].getAttribute('name') == name)
-				list.push(tags[i]);
+		for(var i = 0; i < tags.length; i++) {
+			var current = tags[i];
+			
+			if(!current.isProcessed && current.getAttribute('name') == name)
+				list.push(current);
+		}
 	}
 
 	var elements = [];
@@ -667,7 +691,7 @@
 		
 		// hide the original element
 		element.style.display = 'none';
-
+ 
 		highlighter.noGutter = (showGutter == null) ? IsOptionSet('nogutter', options) : !showGutter;
 		highlighter.addControls = (showControls == null) ? !IsOptionSet('nocontrols', options) : showControls;
 		highlighter.collapse = (collapseAll == null) ? IsOptionSet('collapse', options) : collapseAll;
@@ -701,5 +725,6 @@
 		highlighter.source = element;
 
 		element.parentNode.insertBefore(highlighter.div, element);
+		element.isProcessed = true;
 	}	
 }
